package view;

import controller.ControllerCaixa;
import controller.ControllerCliente;
import controller.ControllerProdutos;
import controller.ControllerTipoPagamento;
import controller.ControllerVendas;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelCaixa;
import model.ModelCliente;
import model.ModelProdutos;
import model.ModelTipoPagamento;
import model.ModelVendas;
import util.BLDatas;

public class ViewRegistrarVenda extends javax.swing.JFrame {

    ControllerVendas controllerVendas = new ControllerVendas();
    ModelVendas modelVendas = new ModelVendas();
    ModelProdutos modelProdutos = new ModelProdutos();
    ArrayList<ModelVendas> listaModelVendas = new ArrayList<>();
    ArrayList<ModelProdutos> listaProdutoses = new ArrayList<>();
    ArrayList<ModelCliente> listaModelClientes = new ArrayList<>();
    ControllerCliente controllerCliente = new ControllerCliente();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ModelCaixa modelCaixa = new ModelCaixa();
    ControllerCaixa controllerCaixa = new ControllerCaixa();
    ControllerTipoPagamento controllerTipoPagamento = new ControllerTipoPagamento();
    ArrayList<ModelTipoPagamento> listaModelTipoPagamentos = new ArrayList<>();
    float valorCartao, valorCheque, valorDinheiro, valorVale;
    boolean alteracao = false;

    /**
     * Creates new form RegistrarVenda
     */
    public ViewRegistrarVenda() {
        initComponents();
        listarClientes();
        listarProdutos();
        listarTipoPagamento();
        this.carregarVendas();
        setLocationRelativeTo(null);
        this.novoProduto();
    }

    private void listarProdutos() {
        listaProdutoses = controllerProdutos.getListaProdutosController();
        jcbProdutos.removeAllItems();
        for (int i = 0; i < listaProdutoses.size(); i++) {
            jcbProdutos.addItem(listaProdutoses.get(i).getNome());
        }
    }

    private void listarClientes() {
        listaModelClientes = controllerCliente.getListaClienteController();
        jcbClientes.removeAllItems();
        for (int i = 0; i < listaModelClientes.size(); i++) {
            jcbClientes.addItem(listaModelClientes.get(i).getNome());
        }
    }

    private void listarTipoPagamento() {
        listaModelTipoPagamentos = controllerTipoPagamento.getListaTipoPagamentoController();
        jcbTipoPagamento.removeAllItems();
        for (int i = 0; i < listaModelTipoPagamentos.size(); i++) {
            jcbTipoPagamento.addItem(listaModelTipoPagamentos.get(i).getDescricao());
        }
    }

    public void setViewConsultarVendas() {
        this.jTabbedPane1.setSelectedIndex(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btFinalizar = new javax.swing.JButton();
        btIncluirProduto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btCancelar = new javax.swing.JButton();
        tfValorTotal = new JFormattedTextField(NumberFormat.getNumberInstance());
        btRetirar = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        tfNumeroVenda = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jcbClientes = new javax.swing.JComboBox();
        jcbProdutos = new javax.swing.JComboBox();
        tfDesconto = new util.VerificarCampo("Numeros",10);
        jcbTipoPagamento = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        tfQuantidade = new util.VerificarCampo("Numeros",10);
        jScrollPane3 = new javax.swing.JScrollPane();
        tbProdutos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btPesquisar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        btCancelar1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jtfPesquisa = new javax.swing.JTextField();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jbImprimir1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbConsultasVendas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Venda");
        setAlwaysOnTop(true);
        setResizable(false);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(520, 405));

        jLabel3.setText("Quant.:");

        btFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Save.png"))); // NOI18N
        btFinalizar.setText("Salvar");
        btFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFinalizarActionPerformed(evt);
            }
        });

        btIncluirProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Create.png"))); // NOI18N
        btIncluirProduto.setText("Incluir");
        btIncluirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIncluirProdutoActionPerformed(evt);
            }
        });

        jLabel1.setText("Cliente:");

        jLabel2.setText("Produto:");

        jLabel5.setText("Total (R$):");

        jLabel4.setText("Desconto (R$):");

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No.png"))); // NOI18N
        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        tfValorTotal.setEditable(false);
        tfValorTotal.setBackground(new java.awt.Color(255, 153, 153));
        tfValorTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));

        btRetirar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Delete.png"))); // NOI18N
        btRetirar.setText("Retirar");
        btRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetirarActionPerformed(evt);
            }
        });

        btNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Add.png"))); // NOI18N
        btNovo.setText("Novo");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        tfNumeroVenda.setEditable(false);
        tfNumeroVenda.setBackground(new java.awt.Color(102, 255, 204));

        jLabel6.setText("NÂº de venda:");

        jcbProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbProdutosMouseClicked(evt);
            }
        });

        tfDesconto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfDescontoKeyReleased(evt);
            }
        });

        jLabel7.setText("Tipo de pagamento:");

        tbProdutos.setAutoCreateRowSorter(true);
        tbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Valor unit.", "Quantidade", "Valor total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbProdutos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbProdutos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbProdutos.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tbProdutos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jcbProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(tfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btIncluirProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btRetirar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btCancelar)
                                .addGap(13, 13, 13)
                                .addComponent(btNovo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbTipoPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(tfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btFinalizar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(tfNumeroVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNumeroVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(jcbProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btRetirar)
                            .addComponent(btIncluirProduto)
                            .addComponent(tfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbTipoPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btCancelar)
                            .addComponent(btNovo)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btFinalizar)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        btPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Search.png"))); // NOI18N
        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Delete.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        btCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No.png"))); // NOI18N
        btCancelar1.setText("Cancelar");
        btCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelar1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Pesquisa:");

        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/print.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        jbImprimir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/print.png"))); // NOI18N
        jbImprimir1.setText("PDV");
        jbImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimir1ActionPerformed(evt);
            }
        });

        tbConsultasVendas.setAutoCreateRowSorter(true);
        tbConsultasVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Venda", "Cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbConsultasVendas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbConsultasVendas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbConsultasVendas.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tbConsultasVendas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btCancelar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAlterar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtfPesquisa)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btPesquisar)
                                .addGap(14, 14, 14))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbImprimir1)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbImprimir)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btPesquisar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExcluir)
                    .addComponent(btCancelar1)
                    .addComponent(jbAlterar))
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("Consulta", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btCancelarActionPerformed
    private void btFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFinalizarActionPerformed
        if (alteracao == false) {
            cadastrarVenda();
            zerarValoresCaixa();
            this.novoProduto();
        } else {
            atualizarProduto();
            zerarValoresCaixa();
            this.novoProduto();
        }
    }//GEN-LAST:event_btFinalizarActionPerformed

    private void cadastrarVenda() {
        if (tbProdutos.getRowCount() < 1) {
            JOptionPane.showMessageDialog(this, "VocÃª deve selecionar os produtos!", "ATENÃÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            listaModelVendas = new ArrayList<>();
            listaProdutoses = new ArrayList<>();
            int codigoProduto, quantidade;
            BLDatas bl = new BLDatas();

            if (this.tfDesconto.getText().equals("")) {
                tfDesconto.setText("0");
            }

            for (int i = 0; i < tbProdutos.getRowCount(); i++) {
                modelVendas = new ModelVendas();
                modelProdutos = new ModelProdutos();
                modelVendas.setClientesCodigo(controllerCliente.getClienteController(jcbClientes.getSelectedItem().toString()).getCodigo());
                modelVendas.setDesconto(Float.parseFloat(this.tfDesconto.getText()));
                modelVendas.setValorTotal(Float.parseFloat(this.tfValorTotal.getText()));
                try {
                    modelVendas.setDataVenda(bl.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                } catch (Exception ex) {
                    Logger.getLogger(ViewRegistrarVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
                codigoProduto = controllerProdutos.getProdutosController(tbProdutos.getValueAt(i, 0).toString()).getCodigo();
                modelVendas.setProdutosCodigo(codigoProduto);
                modelVendas.setQuantidade(Integer.parseInt(tbProdutos.getValueAt(i, 2).toString()));
                modelVendas.setTipoPagamento(controllerTipoPagamento.getTipoPagamentoController(this.jcbTipoPagamento.getSelectedItem().toString()).getCodigo());
                modelProdutos.setCodigo(codigoProduto);
                quantidade = controllerProdutos.getProdutosController(codigoProduto).getEstoque() - Integer.parseInt(tbProdutos.getValueAt(i, 2).toString());
                modelProdutos.setEstoque(quantidade);
                listaModelVendas.add(modelVendas);
                listaProdutoses.add(modelProdutos);
            }
            modelVendas.setListamModelVendases(listaModelVendas);
            modelProdutos.setListaModelProdutoses(listaProdutoses);

            //salvar venda
            int codigoVenda = controllerVendas.salvarVendasController(modelVendas);
            if (codigoVenda > 0) {
                modelVendas.setCodigo(codigoVenda);
                //da baixa no estoque
                controllerProdutos.atualizarProdutosQuantidadeController(modelProdutos);
                //salvar lista de produtos
                controllerVendas.salvarVendasProdutosController(modelVendas);
                adicionarValorCaixa();
                //this.habilitarCampos();
                this.carregarVendas();
                JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");
                //avanÃ§ar para aba 2
                jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao gravar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void atualizarProduto() {
        listaModelVendas = new ArrayList<>();
        listaProdutoses = new ArrayList<>();
        int codigoProduto, quantidade;
        BLDatas bl = new BLDatas();

        if (this.tfDesconto.getText().equals("")) {
            tfDesconto.setText("0");
        }

        for (int i = 0; i < tbProdutos.getRowCount(); i++) {
            modelVendas = new ModelVendas();
            modelProdutos = new ModelProdutos();
            modelVendas.setClientesCodigo(controllerCliente.getClienteController(jcbClientes.getSelectedItem().toString()).getCodigo());
            modelVendas.setDesconto(Float.parseFloat(this.tfDesconto.getText()));
            modelVendas.setValorTotal(Float.parseFloat(this.tfValorTotal.getText()));
            try {
                modelVendas.setDataVenda(bl.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            } catch (Exception ex) {
                Logger.getLogger(ViewRegistrarVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
            codigoProduto = controllerProdutos.getProdutosController(tbProdutos.getValueAt(i, 0).toString()).getCodigo();
            modelVendas.setProdutosCodigo(codigoProduto);
            modelVendas.setQuantidade(Integer.parseInt(tbProdutos.getValueAt(i, 2).toString()));
            modelVendas.setTipoPagamento(controllerTipoPagamento.getTipoPagamentoController(this.jcbTipoPagamento.getSelectedItem().toString()).getCodigo());
            modelProdutos.setCodigo(codigoProduto);
            quantidade = controllerProdutos.getProdutosController(codigoProduto).getEstoque() - Integer.parseInt(tbProdutos.getValueAt(i, 2).toString());
            modelProdutos.setEstoque(quantidade);
            listaModelVendas.add(modelVendas);
            listaProdutoses.add(modelProdutos);
        }
        modelVendas.setListamModelVendases(listaModelVendas);
        modelProdutos.setListaModelProdutoses(listaProdutoses);

        //atualizar venda
        boolean codigoVenda = controllerVendas.atualizarVendasController(modelVendas);
        if (codigoVenda == true) {
            //modelVendas.setCodigo(codigoVenda);
            //da baixa no estoque
            controllerProdutos.atualizarProdutosQuantidadeController(modelProdutos);
            //salvar lista de produtos
            controllerVendas.atualizarVendasController(modelVendas);
            adicionarValorCaixa();
            this.carregarVendas();
            JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!");
            //avanÃ§ar para aba 2
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao gravar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btIncluirProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIncluirProdutoActionPerformed
        this.incluirProduto();
        this.tfValorTotal.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        tfQuantidade.setText("");
        jcbProdutos.setSelectedIndex(0);
    }//GEN-LAST:event_btIncluirProdutoActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        DefaultTableModel tabela = (DefaultTableModel) this.tbConsultasVendas.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tabela);
        this.tbConsultasVendas.setRowSorter(sorter);
        String text = jtfPesquisa.getText();
        sorter.setRowFilter(RowFilter.regexFilter(text, 1));
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        if (testarSelecao() == true) {
            int linha = tbConsultasVendas.getSelectedRow();
            String nome = (String) tbConsultasVendas.getValueAt(linha, 1);
            int codigo = (int) tbConsultasVendas.getValueAt(linha, 0);

            //pegunta se realmente deseja excluir
            int opcao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja"
                    + " excluir o registro:\n" + nome + "?", "AtenÃ§Ã£o", JOptionPane.YES_NO_OPTION);
            if (opcao == JOptionPane.OK_OPTION) {
                if (controllerVendas.excluirVendasController(codigo)) {
                    if (controllerVendas.excluirVendasController(codigo)) {
                        JOptionPane.showMessageDialog(this, "Registro excluÃ­do com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Erro ao excluir os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                    carregarVendas();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void btCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelar1ActionPerformed
        dispose();
    }//GEN-LAST:event_btCancelar1ActionPerformed

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        alteracao = false;
        this.novoProduto();
    }//GEN-LAST:event_btNovoActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        if (testarSelecao() == true) {
            recuperarVenda();
            alteracao = true;
            //voltar para aba 1
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void btRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetirarActionPerformed
        if (testarSelecao() == true) {
            // para excluir a linha
            int linhaSelecionada = tbProdutos.getSelectedRow();
            // Obtem o modelo da JTable
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            // Remove a linha
            modelo.removeRow(linhaSelecionada);

            this.tfValorTotal.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        }
    }//GEN-LAST:event_btRetirarActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed
        ControllerVendas controllerVendas = new ControllerVendas();
        int linha = tbConsultasVendas.getSelectedRow();
        int codigo = (int) tbConsultasVendas.getValueAt(linha, 0);
        controllerVendas.gerarRelatorioVenda(codigo);
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jbImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimir1ActionPerformed
        ControllerVendas controllerVendas = new ControllerVendas();
        int linha = tbConsultasVendas.getSelectedRow();
        int codigo = (int) tbConsultasVendas.getValueAt(linha, 0);
        controllerVendas.gerarRelatorioPDV(codigo);
    }//GEN-LAST:event_jbImprimir1ActionPerformed

    private void tfDescontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDescontoKeyReleased
        this.tfValorTotal.setText(String.valueOf(this.somaEAtualizaValorTotal()));
    }//GEN-LAST:event_tfDescontoKeyReleased

    private void jcbProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbProdutosMouseClicked
        tfQuantidade.setText("");
    }//GEN-LAST:event_jcbProdutosMouseClicked

    private void adicionarValorCaixa() {
        modelCaixa = new ModelCaixa();
        modelCaixa = controllerCaixa.getCaixaController(1);
        switch (modelVendas.getTipoPagamento()) {
            case 1:
                valorDinheiro = modelVendas.getValorTotal();
                modelCaixa.setDinheiro(modelCaixa.getDinheiro() + valorDinheiro);
                break;
            case 2:
                valorCartao = modelVendas.getValorTotal();
                modelCaixa.setCartao(modelCaixa.getCartao() + valorCartao);
                break;
            case 3:
                valorCheque = modelVendas.getValorTotal();
                modelCaixa.setCheque(modelCaixa.getCheque() + valorCheque);
                break;
            case 4:
                valorVale = modelVendas.getValorTotal();
                modelCaixa.setVale(modelCaixa.getVale() + valorVale);
                break;
            default:
                break;
        }
        controllerCaixa.atualizarCaixaController(modelCaixa);
    }

    private void zerarValoresCaixa() {
        valorCartao = 0;
        valorCheque = 0;
        valorDinheiro = 0;
        valorVale = 0;
    }

    private boolean recuperarVenda() {
        try {
            //recebe a linha selecionada
            int linha = this.tbConsultasVendas.getSelectedRow();
            String nomeCliente = (String) this.tbConsultasVendas.getValueAt(linha, 1);
            //pega o codigo do cliente na linha selecionada
            int codigo = (Integer) tbConsultasVendas.getValueAt(linha, 0);
            int codigoProduto;
            modelVendas.setCodigo(codigo);
            //recupera os dados do banco
            modelVendas = controllerVendas.getVendasController(codigo);
            //seta os dados na interface
            this.jcbClientes.setSelectedItem(nomeCliente);
            this.tfNumeroVenda.setText(String.valueOf(modelVendas.getCodigo()));
            this.tfDesconto.setText(String.valueOf(modelVendas.getDesconto()));
            this.tfValorTotal.setText(String.valueOf(modelVendas.getValorTotal()));
            this.jcbTipoPagamento.setSelectedItem(controllerTipoPagamento.getTipoPagamentoController(modelVendas.getTipoPagamento()).getDescricao());
            //recupera os dados do banco
            listaModelVendas = controllerVendas.getListaVendasController(codigo);
            //carregar lista de produtos da venda
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            modelo.setNumRows(0);

            int cont = listaModelVendas.size();
            for (int i = 0; i < cont; i++) {
                codigoProduto = listaModelVendas.get(i).getProdutosCodigo();
                modelProdutos = controllerProdutos.getProdutosController(codigoProduto);
                modelo.addRow(new Object[]{
                    modelProdutos.getNome(),
                    modelProdutos.getValor(),
                    listaModelVendas.get(i).getQuantidade(),
                    listaModelVendas.get(i).getQuantidade() * modelProdutos.getValor()
                });
            }

            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "CÃ³digo invÃ¡lido ou nenhum registro selecionado", "Aviso", JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }

    private void novoProduto() {
        tfNumeroVenda.setText("Novo");
        tfQuantidade.setText("");
        listarClientes();
        listarProdutos();
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        modelo.setNumRows(0);
        this.tfDesconto.setText("");
        tfValorTotal.setText("");
    }

    private void incluirProduto() {
        if (tfQuantidade.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "VocÃª deve informar a quantidade para adicionar!");
        } else {
            //Adiciona linhas na tabela
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            int cont = 0;
            for (int i = 0; i < cont; i++) {
                modelo.setNumRows(0);
            }

            Double valor = controllerProdutos.getProdutosController(this.jcbProdutos.getSelectedItem().toString()).getValor();
            //pega a quantidade de linhas e joga na variavel
            modelo.addRow(new Object[]{
                this.jcbProdutos.getSelectedItem().toString(),
                valor,
                this.tfQuantidade.getText(),
                valor * Float.parseFloat(this.tfQuantidade.getText())
            });
        }
    }

    /**
     * Soma e atualiza os valores total
     *
     * @return
     */
    private float somaEAtualizaValorTotal() {
        float soma = 0;
        float valor;
        int cont = tbProdutos.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = Float.parseFloat(String.valueOf(tbProdutos.getValueAt(i, 3)));
            soma = valor + soma;
        }

        if (!tfDesconto.getText().equals("")) {
            soma = soma - Float.valueOf(tfDesconto.getText());
        }
        return soma;
    }

    private boolean testarSelecao() {
        int selecionada = tbConsultasVendas.getSelectedRow();
        if (selecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para realizar essa operaÃ§Ã£o.");
            return false;
        }
        return true;
    }

    private void carregarVendas() {
        listaModelVendas = controllerVendas.getListaVendasController();
        DefaultTableModel modelo = (DefaultTableModel) tbConsultasVendas.getModel();
        modelo.setNumRows(0);
        //CARREGA OS DADOS DA LISTA NA TABELA
        int cont = listaModelVendas.size();
        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaModelVendas.get(i).getCodigo(),
                controllerCliente.getClienteController(listaModelVendas.get(i).getClientesCodigo()).getNome()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRegistrarVenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btCancelar1;
    private javax.swing.JButton btFinalizar;
    private javax.swing.JButton btIncluirProduto;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btPesquisar;
    private javax.swing.JButton btRetirar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbImprimir1;
    private javax.swing.JComboBox jcbClientes;
    private javax.swing.JComboBox jcbProdutos;
    private javax.swing.JComboBox jcbTipoPagamento;
    private javax.swing.JTextField jtfPesquisa;
    private javax.swing.JTable tbConsultasVendas;
    private javax.swing.JTable tbProdutos;
    private javax.swing.JTextField tfDesconto;
    private javax.swing.JTextField tfNumeroVenda;
    private javax.swing.JTextField tfQuantidade;
    private javax.swing.JFormattedTextField tfValorTotal;
    // End of variables declaration//GEN-END:variables

}
